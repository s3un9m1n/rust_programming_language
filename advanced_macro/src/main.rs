//! 매크로
//! 1. 선언적(declarative) 매크로
//! 2. 절차적(procedural) 매크로
//! 2-1. #[derive] 매크로: 구조체와 열거형에 사용되는 derive 속성
//! 2-2. 속성형(attribute-like) 매크로: 커스텀 속성 정의
//! 2-3. 함수형(function-like) 매크로: 함수 호출처럼 보이지만 토큰을 인수로 조작
//!
//! 매크로란, 다른 코드를 작성하는 코드를 작성, 메타프로그래밍(metaprogramming)이라고 함
//! 매크로는 수동으로 작성한 코드보다 더 많은 코드를 생성하기 위해 확장됨
//! 메타프로그래밍은 작성 및 유지 관리해야 하는 코드의 양을 줄이기 용이
//!
//! 매크로에는 함수의 차이
//! - 함수 시그니처는 매개변수의 개수와 타입을 선언하지만, 매크로는 가변적인 매개변수 사용
//!   ex) println!("hello"), println!("hello {}", name)
//! - 함수는 런타임에 호출되고 트레이트는 컴파일 타임에 구현되지만,
//!   매크로는 컴파일러가 코드의 의미를 해석하기 전에 확장되기 때문에,
//!   주어진 타입에 대한 트레이트 구현 가능
//! - 매크로는 러스트 코드를 작성하는 러스트 코드를 작성해야 하기 때문에,
//!   함수보다 정의가 어려우며, 읽고, 이해하고, 유지관리하기 더 어려움
//! - 함수는 어디서나 정의하고 어디서나 호출할 수 있지만,
//!   매크로는 파일에서 호출하기 전에 매크로를 스코프로 가져와야 함
//!
fn main() {
    println!("Hello, world!");
}
